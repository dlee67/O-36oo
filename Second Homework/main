#include <signal.h>
#include <iostream> 
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

#define buffsize 100

char maxSize[buffsize];

using namespace std;

void sigHandler(int sigNum){

	cout << "signal has been sent." << endl;

}

int main(){

	cout << "The program is now starting." << endl;

	struct sigaction action;
	
	action.sa_handler = sigHandler;
	
	sigemptyset(&action.sa_mask);	

	int checkErr = sigaction(SIGUSR1, &action, NULL);

	pid_t PID = fork();

	if(PID == -1){

		perror("fork");
		exit(EXIT_FAILURE);

	}	

	if(PID == 0){
		
		kill(getppid(), SIGUSR1);	
		
		sleep(1);

		kill(getppid(), SIGUSR1);

		sleep(1);

		kill(getppid(), SIGUSR1);

		exit(EXIT_SUCCESS);

	}else{

		if(checkErr == -1){

			perror("sigaction");
			exit(EXIT_FAILURE);

		}

		pause();

		pause();
		
		wait(NULL);

		sleep(1);

		cout << "\nParent process is now finishing." << endl;

	}
}
